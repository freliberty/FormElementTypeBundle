{% block eliberty_checkboxswitch_javascript %}
    {% spaceless %}
        {% set entityName = getEntityName(form.parent.vars.data) %}
        {% set className = entityName ~ '_' ~ form.vars.name ~ '_' ~ form.vars.id %}
        {% if attr.withoutJsFile is not defined %}
            {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':bootstrap-switch.html.twig' %}
        {% endif %}
    {% endspaceless %}
{% endblock eliberty_checkboxswitch_javascript %}

{% block eliberty_checkboxtoggle_javascript %}
    {% spaceless %}
        {% set entityName = getEntityName(form.parent.vars.data) %}
        {% set className = entityName ~ '_' ~ form.vars.name ~ '_' ~ form.vars.id %}
        {% if attr.withoutJsFile is not defined %}
            {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':bootstrap-toggle.html.twig' %}
        {% endif %}
    {% endspaceless %}
{% endblock eliberty_checkboxtoggle_javascript %}

{% block eliberty_boolean_javascript %}
    {% spaceless %}
        {% set entityName = getEntityName(form.parent.vars.data) %}
        {% set className = entityName ~ '_' ~ form.vars.name ~ '_' ~ form.vars.id %}
        <script type="text/javascript">
            $(function () {
                'use strict';
                $('.{{ className }}').click(function () {
                    if (!$(this).parent().parent().hasClass('disabled')) {
                        if ($(this).parent().parent().hasClass('true')) {
                            $(this).parent().parent().addClass('false').removeClass('true');
                            $(this).children().attr('value', 'false');
                        } else {
                            $(this).children().attr('value', 'true');
                            $(this).parent().parent().addClass('true').removeClass('false');
                        }
                    }
                });
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_boolean_javascript %}

{% block eliberty_inversed_boolean_javascript %}
    {% spaceless %}
        {% set entityName = getEntityName(form.parent.vars.data) %}
        {% set className = entityName ~ '_' ~ form.vars.name ~ '_' ~ form.vars.id %}
        <script type="text/javascript">
            $(function () {
                'use strict';
                $('.{{ className }}').click(function () {
                    if (!$(this).parent().parent().hasClass('disabled')) {
                        if ($(this).parent().parent().hasClass('true')) {
                            $(this).parent().parent().addClass('false').removeClass('true');
                            $(this).children().val('true');
                        } else {
                            $(this).children().val('false');
                            $(this).parent().parent().addClass('true').removeClass('false');
                        }
                    }
                });
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_inversed_boolean_javascript %}

{% block eliberty_multiselect_javascript %}
    {% spaceless %}
        {% if attr.withoutJsFile is not defined %}
            {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':multiselect.html.twig' %}
        {% endif %}
        <script type="text/javascript">

            $(function () {
                $('#{{ id }}').multiselect({
                    enableFiltering: true,
                    filterBehavior: 'both',
                    buttonWidth: '100%',
                    buttonContainer: '<div class="btn-group" style="width:inherit;" />',
                    enableCaseInsensitiveFiltering: true,
                    filterPlaceholder: '{{ 'rp.console.contact.search' | trans }}'
                });
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_multiselect_javascript %}

{% block eliberty_markdown_editor_javascript %}
    {% spaceless %}
        {% if attr.withoutJsFile is not defined %}
            {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':markdown.html.twig' %}
        {% endif %}
        <script type="text/javascript">
            $(function () {
                $('.markdown_editor_{{ id }}').markdown();
                $('.md-header').addClass('transparent');
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_markdown_editor_javascript %}

{% block eliberty_datetime_picker_javascript %}
    {% spaceless %}
        {% if attr.withoutJsFile is not defined %}
            {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':datetimepicker.html.twig' %}
        {% endif %}
        <script type="text/javascript">
            $(function () {
                $('#{{ id }}').datetimepicker({
                    language: 'fr',
                    pick12HourFormat: false
                });
            });
        </script>
    {% endspaceless %}
{% endblock %}

{% block eliberty_datepicker_javascript %}
    {% spaceless %}
        {% if attr.withoutJsFile is not defined %}
            {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':datepicker.html.twig' %}
        {% endif %}
        <script type="text/javascript">
            $(function () {
                $('#{{ id }}').datepicker(
                        {
                            format: 'dd/mm/yyyy',
                            autoclose: true,
                            startDate: {% if attr.startDate is defined %}"{{ attr.startDate }}"
                            {% else %}moment().toDate(){% endif %},
                            weekStart: 1,
                            language: '{{ app.request.locale |lower }}',
                            onRender: function (date) {
                                return date.valueOf() < tomorrow.valueOf() ? 'disabled' : '';
                            }
                        }
                ).on('show', function (e) {
                            $('.datepicker').css('z-index', 99999999999999);
                        });
                $('.glyphicon-calendar').on('click', function (e) {
                    $(this).closest('.input-group').find('input').datepicker('show');
                });
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_datepicker_javascript %}

{% block eliberty_integer_javascript %}
    {% spaceless %}
        {% if attr.withoutJsFile is not defined %}
            {% javascripts '@ElibertyFormElementTypeBundle/Resources/public/js/jquery.numeric.js' %}
            <script type="text/javascript" src="{{ asset_url }}"></script>
            {% endjavascripts %}
        {% endif %}
        <script type="text/javascript">
            $('#{{ id }}').numeric(false, function () {
                alert("Integers only");
                this.value = "";
                this.focus();
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_integer_javascript %}

{% block eliberty_decimal_javascript %}
    {% spaceless %}
        {% if attr.withoutJsFile is not defined %}
            {% javascripts '@ElibertyFormElementTypeBundle/Resources/public/js/jquery.numeric.js' %}
            <script type="text/javascript" src="{{ asset_url }}"></script>
            {% endjavascripts %}
        {% endif %}
        <script type="text/javascript">
            $('#{{ id }}').numeric(".");
        </script>
    {% endspaceless %}
{% endblock eliberty_decimal_javascript %}

{% block eliberty_rest_choice_javascript %}
    {% spaceless %}
    <script type="text/javascript">
        if (typeof list == 'undefined') {
            var list = new Array();;
        }
        {% if attr.methodName is defined %}
            function {{ attr.methodName }} {
                var valueParent = $('#' + id).val();
        {% else %}
            $(function () {
                'use strict';
        {% endif %}
                list['{{ id }}'] = $('#{{ id }}') ;
                var {{ id }}_header      = {% if attr.header is defined %}{{ attr.header|json_encode(constant('JSON_PRETTY_PRINT'))|raw }}{% else %} {} {% endif %};
                var {{ id }}_params      = {% if attr.params is defined %}{{ attr.params|json_encode(constant('JSON_PRETTY_PRINT'))|raw }}{% else %} {} {% endif %};
                var {{ id }}_newRoute    = '{{ attr.route }}';
                var {{ id }}_divSpinner  = {% if attr.divSpinner is defined %} {{ attr.divSpinner }} {% else %} 'divSpinner' {% endif %};
                var {{ id }}_defaultValue   = {% if attr.defaultValue  is defined %} '{{ attr.defaultValue  }}' {% else %} 'undefined' {% endif %};
                if (typeof valueParent != 'undefined') {
                    {{ id }}_newRoute = {{ id }}_newRoute.replace('0', valueParent);
                }
                $.when($.ajax({
                    type: 'GET',
                    dataType: 'json',
                    data: {{ id }}_params,
                    headers: {{ id }}_header,
                    url: {{ id }}_newRoute,
                    beforeSend: function () {
                        $("."+ {{ id }}_divSpinner).empty().html($('.container_spinner').html());
                        $('#{{ id }}').find("option, optgroup").remove()
                    },
                    complete: function () {
                        $("."+ {{ id }}_divSpinner).empty();
                        $('#{{ id }}').removeAttr('disabled');
                        $('#{{ id }}').val('');
                    },
                })).then(function (data) {
                    if (data.length !== 0) {
                        var obj = $('#{{ id }}');
                        var embedTab = new Array();
                        var data = {{ attr.dataResponse }};
                        var dataParams = [data.length, {{ id }}_defaultValue];
                        {% if attr.change is defined and attr.change != null %}
                            obj.on("change", function (e) {
                                var params = [false];
                                Object.keys(list).forEach(function(key, item) {
                                    if (params[0] === true) {
                                        $('#s2id_'+key).find('.select2-chosen').text('');
                                        $('#'+key).val('').attr('disabled', true).trigger("chosen:updated");
                                    }
                                    if (key === '{{ id }}') {
                                        params[0] = true;
                                    }
                                }, params);
                                {% for item in attr.change %}
                                {{ item }}('{{ id }}');
                                {% else  %}
                                {{ attr.change }}('{{ id }}');
                                {% endfor %}
                            });
                        {% endif %}
                        $.each(data, function (i, item) {
                            var option = new Option(eval('{{ attr.dataLabel }}'), this.id);
                            {% if attr.dataLabelEmbed is defined %}
                            var embedLabel = eval('{{ attr.dataLabelEmbed }}')
                                if (typeof embedTab[embedLabel.trim().toLowerCase()] === 'undefined') {
                                    var group = $('<optgroup id="' + embedLabel.trim().toLowerCase() + '" label="' + embedLabel + '" />');
                                    embedTab[embedLabel.trim().toLowerCase()] = group;
                                } else {
                                    group = embedTab[embedLabel.trim().toLowerCase()];
                                }
                                $(option).appendTo(group);
                                group.appendTo(obj);
                            {% else %}
                                $(option).appendTo(obj);
                            {%  endif  %}
                            if (dataParams[1] !== 'undefined' && eval(dataParams[1])) { //||  dataParams[0] === 1
                                $('#s2id_'+'{{ id }}').find('.select2-chosen').text(eval('{{ attr.dataLabel }}'));
                                obj.val(item.id).trigger("chosen:updated").trigger( "click" );
                            }

                        }, dataParams);
                    }
                }, function (err) {
                    $("."+ {{ id }}_divSpinner).empty();
                    onAjaxApiError(err);
                });
            }{% if attr.methodName is not defined %});{% endif %}
    </script>
    {% endspaceless %}
{% endblock eliberty_rest_choice_javascript %}

{% block eliberty_chosen_javascript %}
    {% spaceless %}
        <script type="text/javascript">
            $(function () {
                'use strict';
                $('#{{ id }}').chosen({
                    {% if attr.max_selected_options is defined %}
                    max_selected_options: {{ attr.max_selected_options }}, {% endif %}
                    {% if attr.allow_single_deselect is defined %}
                    allow_single_deselect: true, {% endif %}
                    {% if attr.search_contains is defined %}
                    search_contains: true, {% endif %}
                    {% if attr.placeholder_text_single is defined %}
                    placeholder_text_single: '{{ attr.placeholder_text_single }}', {% endif %}
                });
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_chosen_javascript %}

{% block eliberty_chosen_entity_javascript %}
    {% spaceless %}
        <script type="text/javascript">
            $(function () {
                'use strict';
                $('#{{ id }}').chosen({
                    width: "95%",
                    {% if attr.max_selected_options is defined %}
                    max_selected_options: {{ attr.max_selected_options }}, {% endif %}
                    {% if attr.allow_single_deselect is defined %}
                    allow_single_deselect: true, {% endif %}
                    {% if attr.search_contains is defined %}
                    search_contains: true, {% endif %}
                    {% if attr.placeholder_text_single is defined %}
                    placeholder_text_single: '{{ attr.placeholder_text_single }}', {% endif %}
                });
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_chosen_entity_javascript %}

{% block eliberty_bnt_choice_javascript %}
    {% spaceless %}
        {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':bootstrap-select.html.twig' %}
        <script type="text/javascript">

            $(function () {
                $('.eliberty_bnt_choice_{{ id }}').selectpicker();
                {% if attr.widthInherit is not defined %}
                $('.eliberty_bnt_choice_{{ id }}').css('width', 'inherit');
                {% endif %}
                {% if attr.setStyle is defined %}
                setStyleSelect();
                $('.eliberty_bnt_choice_{{ id }}').on('change', function (e) {
                    setStyleSelect();
                });
                {% endif %}
            });
            {% if attr.setStyle is defined %}
            function setStyleSelect() {
                var selectObj = $('.eliberty_bnt_choice_{{ id }}');
                var style = 'btn-success';
                if (jQuery.inArray(selectObj.val(), '{{ attr.danger }}'.split(',')) !== -1) {
                    style = 'btn-danger';
                } else if (jQuery.inArray(selectObj.val(), '{{ attr.info }}'.split(',')) !== -1) {
                    style = 'btn-info';
                } else if (jQuery.inArray(selectObj.val(), '{{ attr.warning }}'.split(',')) !== -1) {
                    style = 'btn-warning';
                }
                selectObj.selectpicker('setStyle', $('.eliberty_bnt_choice_{{ id }}').attr('removeClass'), 'remove')
                selectObj.selectpicker('setStyle', style);
                selectObj.attr('removeClass', style);
            }
            {% endif %}
        </script>

    {% endspaceless %}
{% endblock eliberty_bnt_choice_javascript %}

{% block eliberty_json_javascript %}
    {% spaceless %}
        {% if attr.withEditor is defined and attr.withEditor == 'true' %}
            {% if attr.withoutJsFile is not defined %}
                {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':jsoneditor.html.twig' %}
            {% endif %}
            <script type="text/javascript">
                var schema_{{ id }} = {% if attr.schema is defined %}{{ attr.schema | raw }}{% else %}'{}'{% endif %};
                var jsonEditor_{{ id }};
                var startval_{{ id }} = {% if value is null or value == '' %}''{% else %}{{ value | raw }}{% endif %};
                var editor_{{ id }} = document.getElementById("editor_holder_{{ id }}");
                var validate_{{ id }} = document.getElementById('valid_indicator_{{ id }}');
                $(function () {


                    if (schema_{{ id }} instanceof Object) {
                        $('#schema_editor_{{ id }}').val(jsl.format.formatJson(JSON.stringify(schema_{{ id }})));
                    } else {
                        $('#schema_editor_{{ id }}').val(jsl.format.formatJson(schema_{{ id }}));
                    }
                    /**
                     * reload schema
                     * @param keep_value
                     */
                    var reload_{{ id }} = function (keep_value) {
                        var startval = (jsonEditor_{{ id }} && keep_value) ? jsonEditor_{{ id }}.getValue() : window.startval_{{ id }};
                        window.startval_{{ id }} = undefined;

                        if (startval instanceof Object && startval.hasOwnProperty('data')) {
                            startval = startval.data;
                        }
                        //destroy last editor if exist
                        if (jsonEditor_{{ id }}) jsonEditor_{{ id }}.destroy();
                        //create new editor
                        jsonEditor_{{ id }} = new JSONEditor(editor_{{ id }}, {
                            schema: schema_{{ id }},
                            theme: 'bootstrap2',
                            startval: startval
                        });

                        //set the language
                        JSONEditor.defaults.language = '{{ app.request.locale }}';
                        {% verbatim %}
                        JSONEditor.defaults.languages.fr = {
                            error_minLength: "La valeur doit être au moins {{0}} caractères!"
                        };
                        {% endverbatim %}

                        window.jsonEditor_{{ id }} = jsonEditor_{{ id }};

                        // When the value of the editor changes, update the JSON output and validation message
                        jsonEditor_{{ id }}.on('change', function () {
                            var json = jsonEditor_{{ id }}.getValue();
                            var validation_errors = jsonEditor_{{ id }}.validate();

                            // Show validation errors if there are any
                            if (validation_errors.length) {
                                $('#btnJson{{ id }}').removeClass('btn-success').addClass('btn-danger')
                                if ($('#{{ id }}').parent().parent().hasClass('has-error') === false) {
                                    var errorAsString = '';
                                    $.each(validation_errors, function (index, obj) {
                                        errorAsString += '<br>' + obj.message;
                                    });
                                    $('#valid_indicator_{{ id }}').html(errorAsString).css('color', 'red');
                                }
                            } else {
                                $('#valid_indicator_{{ id }}').empty();
                                $('#btnJson{{ id }}').removeClass('btn-danger').addClass('btn-success');
                            }
                        });
                    };
                    reload_{{ id }}();


                    /**
                     * update schema
                     */
                    $('#btnJsonSchemaUpdate{{ id }}').on('click', function (event) {
                        event.preventDefault();
                        try {
                            schema_{{ id }} = JSON.parse($('#schema_editor_{{ id }}').val());
                        } catch (e) {
                            alert('Invalid Schema: ' + e.message);
                            return;
                        }
                        reload_{{ id }}();
                        $('#tab_{{ id }} a:first').tab('show')
                    });

                    /**
                     * save the data and the schema into textarea
                     */
                    $("#btnJsonModalSave{{ id }}").on('click', function (event) {
                        var jsonData;
                        {% if attr.withSchema is defined %}
                        jsonData = {
                            "schema": jsonEditor_{{ id }}.schema,
                            "data": jsonEditor_{{ id }}.getValue()
                        };
                        {% else %}
                        jsonData = jsonEditor_{{ id }}.getValue();
                        {% endif %}

                        $('#{{ id }}').val(jsl.format.formatJson(JSON.stringify(jsonData)));
                        $('#myModalJson{{ id }}').modal('hide');
                    });
                });

            </script>
        {% endif %}
    {% endspaceless %}
{% endblock eliberty_json_javascript %}

{% block eliberty_colorpicker_javascript %}
    {% spaceless %}
        {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':colorpicker.html.twig' %}
        <script type="text/javascript">
            $(function () {
                'use strict';
                $('#{{ id }}').pickAColor();
                {% if attr.sizeClass is defined %}
                $('#{{ id }}').parent().parent().addClass('{{ attr.sizeClass }}');
                {% endif %}
                $('.content').css('overflow-y', 'auto');
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_colorpicker_javascript %}

{% block eliberty_file_upload_javascript %}
    {% spaceless %}
        {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':fileupload.html.twig' %}
        <script type="text/javascript">
            $(function () {
                'use strict';
                var uploadManager_{{ id | raw }} = new UploadManager('{{ id | raw }}');
                uploadManager_{{form.vars.id | raw}}.initGritter();
                uploadManager_{{form.vars.id | raw}}.initJcrop();
                uploadManager_{{form.vars.id | raw}}.initActions();
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_file_upload_javascript %}

{% block eliberty_tags_javascript %}
    {% spaceless %}
        {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':selectize.html.twig' %}
        <script type="text/javascript">
            $(function () {
                if (redpillToken == null) {
                    getToken('redpill');
                }
                $('.input-tags').selectize({
                    plugins: ['remove_button'],
                    //maxItems: null,
                    //maxOptions: null,
                    preload: true,
                    valueField: 'name',
                    labelField: 'name',
                    searchField: 'name',
                    hideSelected: true,
                    render: {
                        option: function (item, escape) {
                            return '<div><span class="name" value="' + escape(item.id) + '">' + escape(item.name) + '</span></div>';
                        }
                    },
                    create: true,
                    load: function (query, callback) {
                        {% set url = path('api_v1_get_tags' , {'_format' : 'json'}) | raw %};
                        $.ajax({
                            url: '{{ url }}',
                            dataType: 'json',
                            data: {'search': query},
                            headers: {"Authorization": "Bearer " + redpillToken},
                            success: function (data) {
                                callback(data.data);
                            }
                        });
                    },
                    onItemAdd: function (value, $item) {
                        var newVal = $('#input-tags').val() + ',' + value;
                        $('#input-tags').attr('value', newVal);
                    },
                    onItemRemove: function (value) {
                        var newVal = $('#input-tags').val().replace(',' + value, '');
                        $('#input-tags').attr('value', newVal);
                    }
                });
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_tags_javascript %}


{% block eliberty_phonenumber_javascript %}
    {% spaceless %}
        {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':phonenumber.html.twig' %}
        {% set utilsScript = asset('bundles/' ~ formelementtypemode|lower ~ '/components/home24-intl-tel-input/lib/libphonenumber/build/utils.js') %}
        <script type="text/javascript">
            $(function () {
                var input = $('#{{ id }}');
                var customNumberType = {% if attr.numberType is defined and attr.numberType %}'{{ attr.numberType }}'{% else %}"MOBILE"{% endif %};
                var defaultCountry = {% if attr.initialCountry is defined and attr.initialCountry %}'{{ attr.initialCountry }}'{% else %}'fr'{% endif %};
                var icon = {% if attr.icon is defined and attr.icon %}'{{ attr.icon }}'{% else %}null{% endif %};
                var displayAsterisk = {% if render_required_asterisk is defined and render_required_asterisk %}true{% else %}false{% endif %};
                var isAutoPlaceHolder = {% if attr.autoPlaceHolder is defined %}Boolean({{ attr.autoPlaceHolder }}){% else %}true{% endif %};

                input.intlTelInput({
                    allowExtensions: false,
                    autoFormat: true,
                    autoPlaceholder: isAutoPlaceHolder,
                    numberType: customNumberType,
                    initialCountry: defaultCountry,
                    preferredCountries: [defaultCountry],
                    utilsScript: '{{ utilsScript }}'
                });

                // Add class which is removed after JS executing
                input.addClass('form-control');

                // Init icon
                if (icon !== null) {
                    initIcon(input, icon);
                }

                initAsterisk(input, displayAsterisk);

                // Check number on load
                setTimeout(function () {
                    checkCardNumber(input);
                }, 4000);

                // On change, check that number is valid or not
                input.bind("change paste keyup", function () {
                    checkCardNumber(input);
                });

                // On submit, change number to international format
                input.closest("form").submit(function () {
                    $('#{{ id }}[type=hidden]').val(input.intlTelInput("getNumber"));
                });
            });

            /**
             * Display or not asterisk field
             **/
            function initAsterisk(input, displayAsterisk) {
                input.parent().parent().find('span.phone-asterisk').hide();

                // Display asterisk
                if (displayAsterisk) {
                    input.parent().parent().find('span.phone-asterisk').show();
                }
            }

            /**
             * Initialize icon zone
             **/
            function initIcon(input, icon) {
                var parent = input.parent().parent();
                var inputGroupAddon = parent.find('span.input-group-addon');

                // Display parent span
                inputGroupAddon.show();

                // Remove old glyphicons
                var glyphicon = parent.find('span.glyphicon');
                glyphicon.removeClass('glyphicon-phone glyphicon-phone-alt');

                // Add desired glyphicon
                glyphicon.addClass(icon);
            }

            /**
             * Check the validity of phone number
             * @param input
             */
            function checkCardNumber(input) {
                // Remove old icons
                var icon = input.parent().parent().find('span.phone-checker');
                icon.removeClass('fa-check fa-exclamation-triangle');

                // If we have a number defined
                if (input.intlTelInput("getNumber")) {
                    // If number is valid
                    if (input.intlTelInput("isValidNumber")) {
                        icon.addClass('fa-check').css('color', 'green');
                    } else {
                        icon.addClass('fa-exclamation-triangle').css('color', 'red');
                    }
                }
            }
        </script>
    {% endspaceless %}
{% endblock eliberty_phonenumber_javascript %}


{% block eliberty_textmask_javascript %}
    {% spaceless %}
        {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':textmask.html.twig' %}
        <script type="text/javascript">
            $(function () {
                $('#{{ id }}').inputmask('{{ attr.mask }}');
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_textmask_javascript %}
